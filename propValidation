import React, { useEffect, useState } from "react";
import { useFormik } from "formik";
import * as Yup from "yup";
import { Button, Grid, TextField, TextareaAutosize, FormControl, InputLabel, Select } from "@material-ui/core";
import { useDispatch, useSelector } from "react-redux";
import { setPropertyInformation } from "../../redux/ApplyPropertySlice";
import { createPropertyInfo } from "../Utility/ApiMethod";

const RegisterProperty = ({ next, prev }) => {
  const { formPresetData } = useSelector((state) => state.applyProperty);
  const { welcome, logo } = useSelector((state) => state.applyProperty);
  const dispatch = useDispatch();
  const [initialValues, setInitialValues] = useState({
    id: welcome.applicantId,
    floor_plan: "",
    desired_move_date: "",
    unit_notes: "",
    desired_lease: "",
    rent_amount: "",
    showing_agent: "",
    unit_number: "",
    reffered_by: "",
  });

  let baseValidationSchema = {
    floor_plan: Yup.string(),
  };

  // Conditionally add validation based on formPresetData
  if (formPresetData.rent_amount === "required") {
    baseValidationSchema = {
      ...baseValidationSchema,
      rent_amount: Yup.string().required("This field is required"),
    };
  }
  if (formPresetData.unit_notes === "required") {
    baseValidationSchema = {
      ...baseValidationSchema,
      unit_notes: Yup.string().required("This field is required"),
    };
  }
  // Add other validations based on formPresetData

  const validateSchema = Yup.object().shape(baseValidationSchema);

  const { values, errors, touched, handleBlur, handleChange, handleSubmit, isValid } =
    useFormik({
      initialValues: initialValues,
      enableReinitialize: true,
      validationSchema: validateSchema,
      onSubmit: async (values) => {
        try {
          values.id = welcome.applicantId;
          dispatch(setPropertyInformation(values));
          await createPropertyInfo(values);
          next();
        } catch (error) {
          console.log(error);
        }
      },
    });

  useEffect(() => {
    setInitialValues(initialValues);
  }, [propertyInformation]);

  return (
    <>
      <div className="property-info-main">
        <div className="property-info-box">
          <form onSubmit={handleSubmit}>
            {Object.keys(errors).length > 0 && (
              <div className="global-error-message">
                {Object.values(errors).map((error, index) => (
                  <p key={index} className="form-error">
                    {error}
                  </p>
                ))}
              </div>
            )}

            <Grid container justifyContent="flex-start" spacing={4}>
              <Grid item xs={12} sm={12} md={6}>
                <label>Floor Plan</label> <br />
                <FormControl>
                  <Select
                    style={{
                      width: "100%",
                      height: 45,
                      padding: "8px",
                      fontWeight: 800,
                      color: "#0d3f67",
                      fontSize: "14px",
                    }}
                    native
                    name="floor_plan"
                    variant="outlined"
                    size="small"
                    value={values.floor_plan}
                    onChange={handleChange}
                    onBlur={handleBlur}
                  >
                    <option value="MultFamily">
                      Chetu India New - 0 sq ft - $0.00
                    </option>
                  </Select>
                </FormControl>
              </Grid>
              {/* Add other form fields based on your requirements */}
            </Grid>

            <div
              style={{
                display: "flex",
                alignItems: "flex-start",
                margin: "130px 0px 0px 0px",
                marginTop: "120px",
                justifyContent: "space-between",
              }}
            >
              <Button
                type="button"
                variant="outlined"
                color="primary"
                onClick={() => {
                  prev();
                }}
              >
                Prev
              </Button>
              <Button
                type="submit"
                variant="outlined"
                color="primary"
                disabled={!isValid}
              >
                Next
              </Button>
            </div>
          </form>
        </div>
      </div>
    </>
  );
};

export default RegisterProperty;
