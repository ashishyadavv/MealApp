const crypto = require("crypto");
const axios = require("axios");
const fs = require("fs");
const pdf = require("html-pdf"); // Ensure you install this library: `npm install html-pdf`

const generateMediaPDF = async (veriffSecret, veriffApiKey, sessionId) => {
  try {
    // Step 1: Generate HMAC Signature
    const hmacSignature = crypto
      .createHmac("sha256", veriffSecret)
      .update(sessionId)
      .digest("hex");

    // Step 2: Fetch Media Data
    const veriffApiUrl = `https://stationapi.veriff.com/v1/sessions/${sessionId}/media`;
    const response = await axios.get(veriffApiUrl, {
      headers: {
        "Content-Type": "application/json",
        "X-AUTH-CLIENT": veriffApiKey,
        "X-HMAC-SIGNATURE": hmacSignature,
      },
    });

    const { images, videos } = response.data;

    if (!images || images.length === 0) {
      console.log("No images found in the media data.");
      return { success: false, message: "No images available for PDF generation." };
    }

    // Step 3: Create HTML Content for the PDF
    let htmlContent = `
      <html>
        <head>
          <style>
            body { font-family: Arial, sans-serif; text-align: center; }
            img { width: 100%; max-width: 500px; margin: 10px 0; }
          </style>
        </head>
        <body>
          <h1>Media Report</h1>
          <h2>Session ID: ${sessionId}</h2>
    `;

    images.forEach((imageUrl, index) => {
      htmlContent += `
        <div>
          <p>Image ${index + 1}</p>
          <img src="${imageUrl}" alt="Image ${index + 1}" />
        </div>
      `;
    });

    htmlContent += `
        </body>
      </html>
    `;

    // Step 4: Generate the PDF
    const outputFilePath = `media_report_${sessionId}.pdf`;

    pdf.create(htmlContent, { format: "A4" }).toFile(outputFilePath, (err, res) => {
      if (err) {
        console.error("Error generating PDF:", err);
        return;
      }
      console.log("PDF successfully generated:", res.filename);
    });

    return {
      success: true,
      message: "PDF generated successfully.",
      filePath: outputFilePath,
    };
  } catch (error) {
    console.error("Error fetching media data or generating PDF:", error.message);
    return { success: false, message: error.message };
  }
};

// Example Usage
(async () => {
  const veriffSecret = "your_veriff_secret";
  const veriffApiKey = "your_veriff_api_key";
  const sessionId = "your_session_id";

  const result = await generateMediaPDF(veriffSecret, veriffApiKey, sessionId);
  console.log(result);
})();
