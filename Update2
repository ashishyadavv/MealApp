import React, { useState, useRef } from "react";
import axios from "axios";

const DraggableTextField = ({ text }) => {
  const handleDragStart = (e) => {
    e.dataTransfer.setData("text/plain", text);
  };

  return (
    <div
      draggable
      onDragStart={handleDragStart}
      style={{
        padding: "5px",
        border: "1px solid #ccc",
        borderRadius: "5px",
        marginBottom: "10px",
        cursor: "move",
      }}
    >
      {text}
    </div>
  );
};

const CanvasWithDragAndDrop = () => {
  const canvasRef = useRef(null);
  const [textFields, setTextFields] = useState([]);
  const [resizedField, setResizedField] = useState(null);
  const [resizeStart, setResizeStart] = useState({ x: 0, y: 0 });

  const handleMouseDown = (e, textField) => {
    e.stopPropagation();
    setResizedField(textField);
    setResizeStart({ x: e.clientX, y: e.clientY });
  };

  const handleMouseMove = (e) => {
    if (resizedField) {
      const deltaX = e.clientX - resizeStart.x;
      const deltaY = e.clientY - resizeStart.y;

      const newWidth = Math.max(50, resizedField.width + deltaX);
      const newHeight = Math.max(20, resizedField.height + deltaY);

      const updatedFields = textFields.map((field) =>
        field === resizedField
          ? { ...field, width: newWidth, height: newHeight }
          : field
      );

      setTextFields(updatedFields);

      setResizeStart({ x: e.clientX, y: e.clientY });
    }
  };

  const handleMouseUp = () => {
    setResizedField(null);

    // Store the resized text field sizes in the database
    storeTextFieldSizesInDatabase(textFields);
  };

  const handleDrop = (e) => {
    e.preventDefault();

    const droppedText = e.dataTransfer.getData("text/plain");
    const canvas = canvasRef.current;
    const rect = canvas.getBoundingClientRect();
    const dropX = e.clientX - rect.left;
    const dropY = e.clientY - rect.top;

    // Add the dropped text field to the canvas
    const newTextField = {
      id: Date.now().toString(),
      text: droppedText,
      x: dropX,
      y: dropY,
      width: 100, // Initial width
      height: 30, // Initial height
    };

    setTextFields([...textFields, newTextField]);
  };

  const storeTextFieldSizesInDatabase = async (fields) => {
    try {
      await axios.post("/storeTextFieldSizes", fields);
      // Success
    } catch (error) {
      console.error("Error storing text field sizes:", error);
    }
  };

  return (
    <div>
      <div
        style={{
          float: "left",
          width: "200px",
          marginRight: "20px",
          padding: "10px",
          border: "1px solid #ccc",
          borderRadius: "5px",
        }}
      >
        <p>Drag these text fields onto the canvas:</p>
        <DraggableTextField text="Text Field 1" />
        <DraggableTextField text="Text Field 2" />
        {/* Add more draggable text fields as needed */}
      </div>
      <canvas
        ref={canvasRef}
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onDrop={handleDrop}
        onDragOver={(e) => e.preventDefault()}
        style={{
          border: "1px solid #000",
          width: "600px", // Set the canvas width
          height: "400px", // Set the canvas height
        }}
      >
        {textFields.map((textField) => (
          <div
            key={textField.id}
            style={{
              position: "absolute",
              left: textField.x,
              top: textField.y,
              width: textField.width + "px",
              height: textField.height + "px",
              padding: "5px",
              background: "#ccc",
              cursor: "move",
              zIndex: 9999,
            }}
            onMouseDown={(e) => handleMouseDown(e, textField)}
          >
            {textField.text}
          </div>
        ))}
      </canvas>
    </div>
  );
};

export default CanvasWithDragAndDrop;
