import React, { useState, useRef, useEffect } from 'react';
import pdfjs from 'pdfjs-dist';

const CanvasRenderPdf = () => {
  const [pdfPages, setPdfPages] = useState(0);
  const [customTags, setCustomTags] = useState([]);
  const [pdfData, setPdfData] = useState(null);

  const canvasRefs = useRef([]);

  useEffect(() => {
    // Assuming pdfurl is defined somewhere in your code
    const pdfUrl = 'path/to/your/pdf.pdf'; // replace with your actual PDF URL

    pdfjs.getDocument(pdfUrl).promise.then((pdf) => {
      setPdfPages(pdf.numPages);

      // Loop through each page
      for (let i = 1; i <= pdf.numPages; i++) {
        pdf.getPage(i).then((page) => {
          const canvas = canvasRefs.current[i - 1];
          const context = canvas.getContext('2d');
          const viewport = page.getViewport({ scale: 1.5 });

          canvas.width = viewport.width;
          canvas.height = viewport.height;

          // Render the PDF page
          page.render({
            canvasContext: context,
            viewport: viewport,
          });

          // Draw custom text on the canvas (you need to adjust the positions accordingly)
          context.font = '14px Arial';
          context.fillStyle = 'red';
          context.fillText('Your Custom Text', 50, 50);
        });
      }
    });
  }, []); // Run once when component mounts

  const generatePDF = () => {
    // Assuming you have the modified PDF data available in canvasRefs
    const modifiedPdf = new jsPDF();
    
    canvasRefs.current.forEach((canvas) => {
      const dataURL = canvas.toDataURL(); // Get data URL from canvas
      modifiedPdf.addImage(dataURL, 'JPEG', 0, 0); // Add each page to the modified PDF
    });

    // Save the modified PDF or send it to your database
    setPdfData(modifiedPdf.output('datauristring'));
  };

  return (
    <div className="canvas-render-pdf">
      {/* Canvas for each page */}
      {Array.from({ length: pdfPages }, (_, index) => (
        <canvas key={index} ref={(ref) => (canvasRefs.current[index] = ref)} />
      ))}

      {/* Button to generate and store modified PDF */}
      <button onClick={generatePDF}>Generate and Store PDF</button>

      {/* Display modified PDF (optional) */}
      {pdfData && <iframe title="Modified PDF" src={pdfData} width="100%" height="500px" />}
    </div>
  );
};

export default CanvasRenderPd
