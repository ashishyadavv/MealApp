import React, { useState, useRef } from "react";
import axios from "axios";

const DraggableTextField = ({ text }) => {
  const handleDragStart = (e) => {
    e.dataTransfer.setData("text/plain", text);
  };

  return (
    <div
      draggable
      onDragStart={handleDragStart}
      style={{
        padding: "5px",
        border: "1px solid #ccc",
        borderRadius: "5px",
        marginBottom: "10px",
        cursor: "move",
      }}
    >
      {text}
    </div>
  );
};

const CanvasWithDragAndDrop = () => {
  const canvasRef = useRef(null);
  const [textFields, setTextFields] = useState([]);
  const [resizing, setResizing] = useState(false);
  const [resizedTextField, setResizedTextField] = useState(null);
  const [resizeStart, setResizeStart] = useState({ x: 0, y: 0 });

  const handleMouseDown = (e) => {
    const canvas = canvasRef.current;
    const rect = canvas.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;

    for (const textField of textFields) {
      if (
        mouseX >= textField.x &&
        mouseX <= textField.x + textField.width &&
        mouseY >= textField.y &&
        mouseY <= textField.y + textField.height
      ) {
        setResizing(true);
        setResizedTextField(textField);
        setResizeStart({ x: e.clientX, y: e.clientY });
        break;
      }
    }
  };

  const handleMouseMove = (e) => {
    if (resizing) {
      const deltaX = e.clientX - resizeStart.x;
      const deltaY = e.clientY - resizeStart.y;

      const newWidth = Math.max(50, resizedTextField.width + deltaX);
      const newHeight = Math.max(20, resizedTextField.height + deltaY);

      setResizedTextField((prevTextField) => ({
        ...prevTextField,
        width: newWidth,
        height: newHeight,
      }));

      setResizeStart({ x: e.clientX, y: e.clientY });
    }
  };

  const handleMouseUp = () => {
    if (resizing) {
      setResizing(false);

      // Store the resized text field's size in the database
      const updatedTextField = {
        id: resizedTextField.id,
        width: resizedTextField.width,
        height: resizedTextField.height,
      };
      storeTextFieldSizeInDatabase(updatedTextField);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();

    const droppedText = e.dataTransfer.getData("text/plain");
    const canvas = canvasRef.current;
    const rect = canvas.getBoundingClientRect();
    const dropX = e.clientX - rect.left;
    const dropY = e.clientY - rect.top;

    // Add the dropped text field to the canvas
    const newTextField = {
      id: Date.now(), // Unique identifier (you can use a better approach)
      text: droppedText,
      x: dropX,
      y: dropY,
      width: 100, // Initial width
      height: 30, // Initial height
    };

    setTextFields([...textFields, newTextField]);
  };

  const storeTextFieldSizeInDatabase = async (textField) => {
    try {
      await axios.post("/storeTextFieldSize", textField);
      // Success
    } catch (error) {
      console.error("Error storing text field size:", error);
    }
  };

  return (
    <div>
      <div
        style={{
          float: "left",
          width: "200px",
          marginRight: "20px",
          padding: "10px",
          border: "1px solid #ccc",
          borderRadius: "5px",
        }}
      >
        <p>Drag these text fields onto the canvas:</p>
        <DraggableTextField text="Text Field 1" />
        <DraggableTextField text="Text Field 2" />
        {/* Add more draggable text fields as needed */}
      </div>
      <canvas
        ref={canvasRef}
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onDrop={handleDrop}
        onDragOver={(e) => e.preventDefault()}
        style={{
          border: "1px solid #000",
          width: "600px", // Set the canvas width
          height: "400px", // Set the canvas height
        }}
      >
        {textFields.map((textField, index) => (
          <div
            key={index}
            style={{
              position: "absolute",
              left: textField.x,
              top: textField.y,
              width: textField.width + "px",
              height: textField.height + "px",
              padding: "5px",
              background: "#ccc",
              cursor: "move",
              zIndex: 9999,
            }}
          >
            {textField.text}
            <div
              className="resize-handle"
              style={{
                width: "10px",
                height: "10px",
                position: "absolute",
                bottom: "0",
                right: "0",
                cursor: "se-resize", // Diagonal resize cursor
              }}
              onMouseDown={(e) => handleResizeStart(e, textField)}
            />
          </div>
        ))}
      </canvas>
    </div>
  );
};

export default CanvasWithDragAndDrop;
